@page "/commitments/{Id:guid}"
@using CommitmentsBlazor.Services
@inject ApiClient Api
@inject AuthenticationStateProvider AuthProvider

<h3>Commitment Detail</h3>
@if (_loading)
{
    <p>Loading...</p>
}
else if (_error != null)
{
    <div class="alert alert-danger">@_error</div>
}
else if (_c == null)
{
    <p>Not found.</p>
}
else
{
    <div class="d-flex justify-content-between align-items-center">
        <h4>@_c.Goal</h4>
        <span class="badge bg-secondary">@_c.Status</span>
    </div>
    <p><strong>Deadline:</strong> @_c.DeadlineUtc.ToString("u") | <strong>Progress:</strong> @_c.ProgressPercent% | <strong>Risk:</strong> @_c.RiskBadge</p>

    @if (_userId != Guid.Empty)
    {
        <div class="mb-3">
            <button class="btn btn-sm btn-primary me-2" @onclick="ShowCheckInModal">New Check-In</button>
            <button class="btn btn-sm btn-warning me-2" @onclick="@(() => ConfirmAction("Cancel", Api.CancelAsync))">Cancel</button>
            <button class="btn btn-sm btn-success me-2" @onclick="@(() => ConfirmAction("Complete", Api.CompleteAsync))">Complete</button>
            <button class="btn btn-sm btn-danger me-2" @onclick="@(() => ConfirmAction("Fail", Api.FailAsync))">Fail</button>
            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => ConfirmAction("Delete", Api.DeleteAsync))">Delete</button>
        </div>
    }

    @if (_actionMessage != null)
    {
        <div class="alert alert-info">@_actionMessage</div>
    }

    <h5>Recent Check-Ins</h5>
    @if (_checkInsLoading)
    {
        <p><em>Loading check-ins...</em></p>
    }
    else if (_checkIns.Count == 0)
    {
        <p class="text-muted">No check-ins yet.</p>
    }
    else
    {
        <table class="table table-sm">
            <thead><tr><th>When (UTC)</th><th>Note</th></tr></thead>
            <tbody>
            @foreach (var ci in _checkIns)
            {
                <tr>
                    <td>@ci.OccurredAtUtc.ToString("u")</td>
                    <td>@ci.Note</td>
                </tr>
            }
            </tbody>
        </table>
    }

    <a class="btn btn-secondary mt-3" href="/commitments">Back</a>
}

<!-- Check-In Modal -->
@if (_showCheckInModal)
{
    <div class="modal fade show d-block" style="background:rgba(0,0,0,.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">New Check-In</h5>
                    <button type="button" class="btn-close" @onclick="CloseCheckInModal"></button>
                </div>
                <div class="modal-body">
                    @if (_checkInMessage != null)
                    {
                        <div class="alert alert-secondary">@_checkInMessage</div>
                    }
                    <EditForm Model="_checkIn" OnValidSubmit="CreateCheckIn">
                        <InputTextArea class="form-control mb-2" @bind-Value="_checkIn.Note" placeholder="Note (optional)" />
                        <button class="btn btn-primary btn-sm" disabled="@_busy">Save</button>
                        <button type="button" class="btn btn-outline-secondary btn-sm ms-2" @onclick="CloseCheckInModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Confirm Action Modal -->
@if (_confirmAction != null)
{
    <div class="modal fade show d-block" style="background:rgba(0,0,0,.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm @_confirmActionLabel</h5>
                    <button type="button" class="btn-close" @onclick="CancelConfirm"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to @_confirmActionLabel this commitment?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary btn-sm" @onclick="CancelConfirm">Close</button>
                    <button class="btn btn-danger btn-sm" disabled="@_busy" @onclick="ExecuteConfirmedAction">Yes, @_confirmActionLabel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }
    private bool _loading = true;
    private bool _busy;
    private string? _error;
    private string? _actionMessage;
    private string? _checkInMessage;
    private ApiClient.CommitmentSummary? _c;
    private List<ApiClient.CheckIn> _checkIns = new();
    private bool _checkInsLoading;

    private bool _showCheckInModal;
    private CheckInForm _checkIn = new();
    private Func<Guid, Task<HttpResponseMessage>>? _confirmAction;
    private string? _confirmActionLabel;
    private Guid _userId;

    private class CheckInForm { public string? Note { get; set; } }

    protected override async Task OnParametersSetAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        _userId = Guid.TryParse(state.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value, out var id) ? id : Guid.Empty;
        await Load();
    }

    private async Task Load()
    {
        _loading = true; _error = null; _actionMessage = null; _checkInMessage = null;
        try { _c = await Api.GetCommitmentAsync(Id); }
        catch (Exception ex) { _error = ex.Message; }
        finally { _loading = false; }
        await LoadCheckIns();
    }

    private async Task LoadCheckIns()
    {
        _checkInsLoading = true;
        try { _checkIns = (await Api.GetCheckInsAsync(Id))?.OrderByDescending(c => c.OccurredAtUtc).Take(10).ToList() ?? new(); }
        catch { }
        finally { _checkInsLoading = false; }
    }

    private void ShowCheckInModal() { _showCheckInModal = true; _checkInMessage = null; }
    private void CloseCheckInModal() { _showCheckInModal = false; }

    private void ConfirmAction(string label, Func<Guid, Task<HttpResponseMessage>> action)
    {
        _confirmActionLabel = label;
        _confirmAction = action;
    }
    private void CancelConfirm() { _confirmAction = null; _confirmActionLabel = null; }

    private async Task ExecuteConfirmedAction()
    {
        if (_confirmAction == null) return;
        await DoAction(_confirmAction);
        CancelConfirm();
    }

    private async Task DoAction(Func<Guid, Task<HttpResponseMessage>> action)
    {
        _busy = true; _actionMessage = null;
        try
        {
            var resp = await action(Id);
            if (resp.IsSuccessStatusCode)
            {
                _actionMessage = "Action OK";
                _c = await Api.GetCommitmentAsync(Id);
            }
            else
            {
                _actionMessage = "Action failed: " + await resp.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            _actionMessage = ex.Message;
        }
        finally { _busy = false; }
    }

    private async Task CreateCheckIn()
    {
        _busy = true; _checkInMessage = null;
        try
        {
            var resp = await Api.CreateCheckInAsync(Id, _checkIn.Note);
            if (resp.IsSuccessStatusCode)
            {
                _checkInMessage = "Check-in created";
                _checkIn = new();
                await LoadCheckIns();
                _c = await Api.GetCommitmentAsync(Id);
            }
            else
            {
                _checkInMessage = "Failed: " + await resp.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            _checkInMessage = ex.Message;
        }
        finally { _busy = false; }
    }
}
