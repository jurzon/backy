@page "/commitments/create"
@inject ApiClient Api
@inject AuthenticationStateProvider AuthProvider

<h3>Create Commitment</h3>

@if (_successId != null)
{
    <div class="alert alert-success">Created! <a href="/commitments/@_successId">View</a></div>
}

<EditForm Model="_model" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-2">
        <label class="form-label">Goal</label>
        <InputText class="form-control" @bind-Value="_model.Goal" />
    </div>
    <div class="mb-2">
        <label class="form-label">Stake Amount (major)</label>
        <InputNumber class="form-control" @bind-Value="_model.StakeAmount" step="0.01" />
    </div>
    <div class="mb-2">
        <label class="form-label">Currency</label>
        <InputText class="form-control" @bind-Value="_model.Currency" />
    </div>
    <div class="mb-2">
        <label class="form-label">Deadline (UTC)</label>
        <InputDate class="form-control" @bind-Value="_model.DeadlineDate" />
    </div>
    <div class="mb-2">
        <label class="form-label">Hour (UTC)</label>
        <InputNumber class="form-control" @bind-Value="_model.DeadlineHour" />
    </div>
    <div class="mb-2">
        <label class="form-label">Schedule Start Date</label>
        <InputDate class="form-control" @bind-Value="_model.StartDate" />
    </div>
    <div class="mb-2">
        <label class="form-label">Time Of Day (HH:mm)</label>
        <InputText class="form-control" @bind-Value="_model.TimeOfDay" />
    </div>
    <button class="btn btn-primary" type="submit" disabled="@(_submitting)">Create</button>
</EditForm>

@if (_error != null)
{
    <div class="alert alert-danger mt-2">@_error</div>
}

@code {
    private Guid _userId;
    private bool _submitting; private string? _error; private Guid? _successId;

    private CommitmentForm _model = new()
    {
        Currency = "EUR",
        StakeAmount = 5.0m, // Fix: Use decimal literal instead of int
        DeadlineDate = DateOnly.FromDateTime(DateTime.UtcNow.AddDays(7)),
        DeadlineHour = 12,
        StartDate = DateOnly.FromDateTime(DateTime.UtcNow.Date.AddDays(1)),
        TimeOfDay = "09:00"
    };

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var idClaim = state.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (idClaim != null) _userId = Guid.Parse(idClaim);
    }

    private async Task OnSubmit()
    {
        _error = null; _submitting = true; _successId = null;
        // Fallback: if user id not set (e.g. prerender not hydrated yet) use dev id
        if (_userId == Guid.Empty)
        {
            _userId = Guid.Parse("11111111-1111-1111-1111-111111111111");
        }
        try
        {
            var deadline = _model.DeadlineDate.ToDateTime(new TimeOnly(_model.DeadlineHour,0), DateTimeKind.Utc);
            var payload = new {
                UserId = _userId,
                Goal = _model.Goal,
                StakeAmount = _model.StakeAmount,
                Currency = _model.Currency,
                DeadlineUtc = deadline,
                Timezone = "UTC",
                Schedule = new {
                    PatternType = "daily",
                    Interval = 1,
                    WeekdaysMask = (string?)null,
                    MonthDay = (int?)null,
                    NthWeek = (int?)null,
                    NthWeekday = (int?)null,
                    StartDate = _model.StartDate,
                    TimeOfDay = TimeOnly.Parse(_model.TimeOfDay)
                }
            };
            var resp = await Api.CreateCommitmentAsync(payload);
            if (resp.IsSuccessStatusCode)
            {
                var created = await resp.Content.ReadFromJsonAsync<ApiCommitment>();
                _successId = created?.Id;
            }
            else
            {
                _error = await resp.Content.ReadAsStringAsync();
            }
        }
        catch(Exception ex){ _error = ex.Message; }
        finally { _submitting = false; }
    }

    class ApiCommitment { public Guid Id { get; set; } public string Goal { get; set; } = string.Empty; }

    class CommitmentForm
    {
        public string Goal { get; set; } = string.Empty;
        public decimal StakeAmount { get; set; } // Keep as decimal for proper numeric handling
        public string Currency { get; set; } = "EUR";
        public DateOnly DeadlineDate { get; set; }
        public int DeadlineHour { get; set; }
        public DateOnly StartDate { get; set; }
        public string TimeOfDay { get; set; } = "09:00";
    }
}
