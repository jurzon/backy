// <auto-generated />
using System;
using Commitments.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Commitments.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Commitments.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommitmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentId");

                    b.HasIndex("EventType");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Commitments.Domain.Entities.CheckIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommitmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentId");

                    b.ToTable("CheckIns");
                });

            modelBuilder.Entity("Commitments.Domain.Entities.Commitment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CancelledAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("DeadlineUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EditingLockedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FailedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("GraceExpiresUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("StakeAmountMinor")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("Status", "DeadlineUtc");

                    b.ToTable("Commitments");
                });

            modelBuilder.Entity("Commitments.Domain.Entities.PaymentIntentLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("AmountMinor")
                        .HasColumnType("bigint");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("CommitmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastErrorCode")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentId");

                    b.HasIndex("CommitmentId", "AttemptNumber")
                        .IsUnique();

                    b.ToTable("PaymentIntentLogs");
                });

            modelBuilder.Entity("Commitments.Domain.Entities.PaymentSetupState", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("HasPaymentMethod")
                        .HasColumnType("boolean");

                    b.Property<string>("LatestSetupIntentId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("PaymentSetupStates");
                });

            modelBuilder.Entity("Commitments.Domain.Entities.ReminderEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommitmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ScheduledForUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("CommitmentId", "ScheduledForUtc");

                    b.ToTable("ReminderEvents");
                });

            modelBuilder.Entity("Commitments.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("CommitmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<int?>("MonthDay")
                        .HasColumnType("integer");

                    b.Property<int?>("NthWeek")
                        .HasColumnType("integer");

                    b.Property<int?>("NthWeekday")
                        .HasColumnType("integer");

                    b.Property<int>("PatternType")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("TimeOfDay")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Weekdays")
                        .HasColumnType("integer");

                    b.HasKey("CommitmentId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Commitments.Domain.Entities.CheckIn", b =>
                {
                    b.HasOne("Commitments.Domain.Entities.Commitment", null)
                        .WithMany("CheckIns")
                        .HasForeignKey("CommitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Commitments.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Commitments.Domain.Entities.Commitment", null)
                        .WithOne("Schedule")
                        .HasForeignKey("Commitments.Domain.Entities.Schedule", "CommitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Commitments.Domain.Entities.Commitment", b =>
                {
                    b.Navigation("CheckIns");

                    b.Navigation("Schedule");
                });
#pragma warning restore 612, 618
        }
    }
}
