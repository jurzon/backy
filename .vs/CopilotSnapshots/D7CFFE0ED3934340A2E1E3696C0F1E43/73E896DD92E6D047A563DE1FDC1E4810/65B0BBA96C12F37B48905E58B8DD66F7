using Commitments.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Hangfire;
using Hangfire.PostgreSql;
using Commitments.Api.Background;
using Commitments.Domain.Abstractions;
using Commitments.Api.Payments;
using Commitments.Api.Notifications;
using Stripe;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var conn = builder.Configuration.GetConnectionString("Postgres") ?? "Host=localhost;Username=commitments;Password=commitments;Database=commitments";
builder.Services.AddDbContext<AppDbContext>(o => o.UseNpgsql(conn));

// Stripe API Key (dev: can be empty placeholder)
var stripeKey = builder.Configuration.GetValue<string>("Stripe:ApiKey");
var stripeWebhookSecret = builder.Configuration.GetValue<string>("Stripe:WebhookSecret");
if (!string.IsNullOrWhiteSpace(stripeKey)) StripeConfiguration.ApiKey = stripeKey;

// Hangfire configuration
builder.Services.AddHangfire(config =>
    config.SetDataCompatibilityLevel(CompatibilityLevel.Version_180)
          .UseSimpleAssemblyNameTypeSerializer()
          .UseRecommendedSerializerSettings()
          .UsePostgreSqlStorage(options => options.UseNpgsqlConnection(conn)));

builder.Services.AddHangfireServer();

builder.Services.AddSingleton<IClock, SystemClock>();
builder.Services.AddScoped<IReminderScheduler, ReminderScheduler>();
builder.Services.AddScoped<IGraceExpiryScanner, GraceExpiryScanner>();
builder.Services.AddScoped<IPaymentService, StripePaymentService>();
builder.Services.AddScoped<IPaymentRetryWorker, PaymentRetryWorker>();
// Notifications
builder.Services.AddScoped<INotificationSender, ConsoleNotificationSender>();
builder.Services.AddScoped<IReminderNotificationDispatcher, ReminderNotificationDispatcher>();

var app = builder.Build();

// Auto-migrate
using (var scope = app.Services.CreateScope())
{
    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    db.Database.Migrate();
}

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
    app.UseHangfireDashboard("/hangfire");
}

app.MapGet("/health", () => Results.Ok(new { status = "ok", time = DateTime.UtcNow }));

app.MapCommitmentEndpoints();

// Payments placeholder endpoint (webhook stub)
app.MapPost("/webhooks/stripe", async (HttpRequest request, IPaymentService payments) =>
{
    var json = await new StreamReader(request.Body).ReadToEndAsync();
    try
    {
        Event stripeEvent;
        if (!string.IsNullOrWhiteSpace(stripeWebhookSecret))
        {
            var sigHeader = request.Headers["Stripe-Signature"].ToString();
            stripeEvent = EventUtility.ConstructEvent(json, sigHeader, stripeWebhookSecret);
        }
        else
        {
            stripeEvent = EventUtility.ParseEvent(json);
        }

        switch (stripeEvent.Type)
        {
            case "payment_intent.succeeded":
                if (stripeEvent.Data.Object is PaymentIntent pis)
                    await payments.UpdatePaymentStatusAsync(pis.Id, "succeeded");
                break;
            case "payment_intent.payment_failed":
                if (stripeEvent.Data.Object is PaymentIntent pif)
                    await payments.UpdatePaymentStatusAsync(pif.Id, "failed", pif.LastPaymentError?.Code);
                break;
        }
        return Results.Ok();
    }
    catch (Exception ex)
    {
        return Results.Problem(ex.Message, statusCode: 400);
    }
}).WithName("StripeWebhook").WithOpenApi();

// Recurring jobs
RecurringJob.AddOrUpdate<ReminderHorizonJob>("reminder-horizon", job => job.RunAsync(), "*/15 * * * *");
RecurringJob.AddOrUpdate<GraceExpiryJob>("grace-expiry", job => job.RunAsync(), "*/5 * * * *");
RecurringJob.AddOrUpdate("payment-retry", () => PaymentRetryRunner(app.Services), Cron.Daily);
RecurringJob.AddOrUpdate<ReminderNotificationJob>("reminder-dispatch", job => job.RunAsync(), "*/10 * * * *");

app.Run();

static async Task PaymentRetryRunner(IServiceProvider sp)
{
    using var scope = sp.CreateScope();
    var worker = scope.ServiceProvider.GetRequiredService<IPaymentRetryWorker>();
    await worker.RunAsync();
}
